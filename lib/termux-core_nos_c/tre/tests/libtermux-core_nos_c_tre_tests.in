#!@TERMUX__PREFIX@/bin/bash
# shellcheck shell=bash

##
# `libtermux_core__nos__c__tests__main`
##
libtermux_core__nos__c__tests__main() {

    TERMUX_CORE__TESTS__LOG_TAG="lib@TERMUX__LNAME@-core_c.tests"

    termux_core__tests__log 4 "main()"

    # Set `TERMUX_CORE__TESTS__TESTS_PATH` used by compiled c tests.
    if [[ ! "$TERMUX_CORE__TESTS__TESTS_PATH" =~ $TERMUX_CORE__TESTS__REGEX__ROOTFS_OR_ABSOLUTE_PATH ]]; then
        termux_core__tests__log_error "The TERMUX_CORE__TESTS__TESTS_PATH '$TERMUX_CORE__TESTS__TESTS_PATH' is either not set or is not an absolute path"
        return 1
    fi


    # Run unit tests.
    if [[ "$TERMUX_CORE__TESTS__RUN_UNIT_TESTS" == "true" ]]; then
        libtermux_core__nos__c__unit_tests__run_command || return $?
    fi

    return 0

}



##
# `libtermux_core__nos__c__unit_tests__run_command`
##
libtermux_core__nos__c__unit_tests__run_command() {

    local return_value

    termux_core__tests__log 3 "Running 'unit' tests"

    (
        libtermux_core__nos__c__unit_binary_tests__run_command || exit $?
    ) || return $?

    return 0

}

##
# `libtermux_core__nos__c__unit_binary_tests__run_command`
##
libtermux_core__nos__c__unit_binary_tests__run_command() {

    local return_value

    local tests_start_time; tests_start_time="$(date "+%s")" || return $?

    local unit_binary_tests_variant="unit-binary-tests"

    if [[ "$TERMUX_CORE__TESTS__USE_FSANITIZE_BUILDS" == "true" ]]; then
        unit_binary_tests_variant+="-fsanitize"
    else
        unit_binary_tests_variant+="-nofsanitize"
    fi

    termux_core__tests__log 1 "Running 'libtermux-core_nos_c_tre_${unit_binary_tests_variant}'"

    output="$(
        # cd first and execute with relative path to shorten `argv[0]`,
        # otherwise command will fail with exit code `1` on Android `< 6`
        # without any error if `argv[0]` length is `>= 128`.
        # Check `checkExecArg0BufferOverflow()` function in `ExecIntercept.h`.
        cd "$TERMUX_CORE__TESTS__TESTS_PATH/lib/termux-core_nos_c_tre/bin" || exit $?
        printf -v "$TERMUX_CORE__TESTS__LOG_LEVEL___N" "%s" "$TERMUX_CORE__TESTS__LOG_LEVEL" || exit $?
        export "${TERMUX_CORE__TESTS__LOG_LEVEL___N?}" || exit $?
        ASAN_OPTIONS="fast_unwind_on_malloc=false:detect_leaks=$TERMUX_CORE__TESTS__DETECT_LEAKS" LSAN_OPTIONS="report_objects=$TERMUX_CORE__TESTS__DETECT_LEAKS" \
            "./libtermux-core_nos_c_tre_${unit_binary_tests_variant}" 2>&1)"
    return_value=$?
    if [ $return_value -eq 0 ] ||
        { [ $return_value -eq 141 ] &&
            { [[ "$output" == *"WARNING: Can't read from symbolizer at fd"* ]] ||
              [[ "$output" == *"WARNING: external symbolizer didn't start up correctly!"* ]]
            } &&
            [[ "$output" == *"runTests(end)"* ]];
        }; then
        printf "%s\n" "$output"
    else
        printf "%s\n" "$output" 1>&2
        termux_core__tests__log_error "'libtermux-core_nos_c_tre_${unit_binary_tests_variant}' failed"
        return $return_value
    fi

    termux_core__tests__log 2 "'libtermux-core_nos_c_tre_${unit_binary_tests_variant}' completed in \
$(termux_core__tests__print_elapsed_time "$tests_start_time")"

    return 0

}
